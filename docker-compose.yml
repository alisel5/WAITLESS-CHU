version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: waitless_chu_postgres
    environment:
      POSTGRES_DB: waitless_chu
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: your_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./database/schema.sql:/docker-entrypoint-initdb.d/schema.sql
    networks:
      - waitless_network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis for caching and real-time features
  redis:
    image: redis:7-alpine
    container_name: waitless_chu_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - waitless_network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Backend API Server
  api:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: waitless_chu_api
    environment:
      NODE_ENV: development
      PORT: 3001
      DB_HOST: postgres
      DB_PORT: 5432
      DB_NAME: waitless_chu
      DB_USER: postgres
      DB_PASSWORD: your_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      JWT_SECRET: your_super_secret_jwt_key_change_this_in_production
      QR_CODE_BASE_URL: http://localhost:3000/ticket
    ports:
      - "3001:3001"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - waitless_network
    volumes:
      - ./backend:/app
      - /app/node_modules
    command: npm run dev:server

  # Frontend React App (for your teammate)
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: waitless_chu_frontend
    environment:
      REACT_APP_API_URL: http://localhost:3001
      REACT_APP_SOCKET_URL: http://localhost:3001
    ports:
      - "3000:3000"
    depends_on:
      - api
    networks:
      - waitless_network
    volumes:
      - ./frontend:/app
      - /app/node_modules

volumes:
  postgres_data:
  redis_data:

networks:
  waitless_network:
    driver: bridge 